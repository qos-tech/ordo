generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AgendamentoEmails {
  id              Int       @id @default(autoincrement())
  email           String    @db.VarChar(255)
  subject         String    @db.VarChar(255)
  message         String?
  dataAgendamento DateTime  @db.Timestamptz(6)
  companyId       Int
  createdAt       DateTime  @db.Timestamptz(6)
  updatedAt       DateTime  @db.Timestamptz(6)
  Companies       Companies @relation(fields: [companyId], references: [id], onDelete: Cascade)
}

model Ajuda {
  id        Int      @id @default(autoincrement())
  texto     String?
  userId    String?  @db.VarChar(255)
  socketId  String?  @db.VarChar(255)
  dataHora  DateTime @default(now()) @db.Timestamptz(6)
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @db.Timestamptz(6)
}

model AnnouncementVisibilities {
  id             Int           @id @default(autoincrement())
  companyId      Int
  announcementId Int
  visible        Boolean
  title          String
  text           String
  mediaPath      String?
  mediaName      String?
  createdAt      DateTime?     @db.Timestamptz(6)
  updatedAt      DateTime?     @db.Timestamptz(6)
  Announcements  Announcements @relation(fields: [announcementId], references: [id], onDelete: Cascade)
  Companies      Companies     @relation(fields: [companyId], references: [id], onDelete: Cascade)
}

model Announcements {
  id                       Int                        @id @default(autoincrement())
  priority                 Int?
  title                    String                     @db.VarChar(255)
  text                     String
  mediaPath                String?
  mediaName                String?
  companyId                Int
  status                   Boolean?
  createdAt                DateTime                   @db.Timestamptz(6)
  updatedAt                DateTime                   @db.Timestamptz(6)
  AnnouncementVisibilities AnnouncementVisibilities[]
  Companies                Companies                  @relation(fields: [companyId], references: [id], onDelete: Cascade)
}

model ApiUsages {
  id              Int      @id @default(autoincrement())
  companyId       Int?     @default(0)
  dateUsed        String
  UsedOnDay       Int?     @default(0)
  usedText        Int?     @default(0)
  usedPDF         Int?     @default(0)
  usedImage       Int?     @default(0)
  usedVideo       Int?     @default(0)
  usedOther       Int?     @default(0)
  usedCheckNumber Int?     @default(0)
  createdAt       DateTime @db.Timestamptz(6)
  updatedAt       DateTime @db.Timestamptz(6)
}

model Baileys {
  id         Int      @default(autoincrement())
  whatsappId Int
  contacts   Json?
  chats      Json?
  createdAt  DateTime @db.Timestamptz(6)
  updatedAt  DateTime @db.Timestamptz(6)

  @@id([id, whatsappId])
}

model BaileysChats {
  id                    Int               @id @default(autoincrement())
  whatsappId            Int?
  jid                   String            @db.VarChar(255)
  conversationTimestamp String            @db.VarChar(255)
  unreadCount           Int?              @default(0)
  createdAt             DateTime          @db.Timestamptz(6)
  updatedAt             DateTime          @db.Timestamptz(6)
  Whatsapps             Whatsapps?        @relation(fields: [whatsappId], references: [id], onDelete: Cascade)
  BaileysMessages       BaileysMessages[]
}

model BaileysMessages {
  id            Int           @id @default(autoincrement())
  whatsappId    Int?
  baileysChatId Int?
  jsonMessage   Json          @db.Json
  createdAt     DateTime      @db.Timestamptz(6)
  updatedAt     DateTime      @db.Timestamptz(6)
  BaileysChats  BaileysChats? @relation(fields: [baileysChatId], references: [id], onDelete: Cascade)
  Whatsapps     Whatsapps?    @relation(fields: [whatsappId], references: [id], onDelete: Cascade)
}

model BlackListContacts {
  id          Int        @id @default(autoincrement())
  blacklistId Int
  contactId   Int
  createdAt   DateTime   @db.Timestamptz(6)
  updatedAt   DateTime   @db.Timestamptz(6)
  BlackLists  BlackLists @relation(fields: [blacklistId], references: [id], onDelete: Cascade)
  Contacts    Contacts   @relation(fields: [contactId], references: [id], onDelete: Cascade)
}

model BlackLists {
  id                Int                 @id @default(autoincrement())
  name              String              @db.VarChar(255)
  companyId         Int
  createdAt         DateTime            @db.Timestamptz(6)
  updatedAt         DateTime            @db.Timestamptz(6)
  numbers           Json?
  BlackListContacts BlackListContacts[]
  Companies         Companies           @relation(fields: [companyId], references: [id], onDelete: Cascade)
}

model CampaignLogs {
  id         Int       @id @default(autoincrement())
  campaignId Int
  type       String    @db.VarChar(255)
  message    String
  createdAt  DateTime  @db.Timestamptz(6)
  updatedAt  DateTime  @default(now()) @db.Timestamptz(6)
  Campaigns  Campaigns @relation(fields: [campaignId], references: [id], onDelete: Cascade)
}

model CampaignSettings {
  id        Int        @id @default(autoincrement())
  key       String     @db.VarChar(255)
  value     String?
  companyId Int?
  createdAt DateTime   @db.Timestamptz(6)
  updatedAt DateTime   @db.Timestamptz(6)
  Companies Companies? @relation(fields: [companyId], references: [id], onDelete: Cascade)
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model CampaignShipping {
  id                      Int               @id @default(autoincrement())
  jobId                   String?           @db.VarChar(255)
  number                  String            @db.VarChar(255)
  message                 String
  confirmationMessage     String?
  confirmation            Boolean?
  contactId               Int?
  campaignId              Int
  confirmationRequestedAt DateTime?         @db.Timestamptz(6)
  confirmedAt             DateTime?         @db.Timestamptz(6)
  deliveredAt             DateTime?         @db.Timestamptz(6)
  createdAt               DateTime          @db.Timestamptz(6)
  updatedAt               DateTime          @db.Timestamptz(6)
  Campaigns               Campaigns         @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  ContactListItems        ContactListItems? @relation(fields: [contactId], references: [id], onUpdate: SetNull)

  @@index([campaignId], map: "idx_cpsh_campaign_id")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Campaigns {
  id                   Int                @id @default(autoincrement())
  name                 String             @db.VarChar(255)
  message1             String?            @default("")
  message2             String?            @default("")
  message3             String?            @default("")
  message4             String?            @default("")
  message5             String?            @default("")
  confirmationMessage1 String?            @default("")
  confirmationMessage2 String?            @default("")
  confirmationMessage3 String?            @default("")
  confirmationMessage4 String?            @default("")
  confirmationMessage5 String?            @default("")
  status               String?            @db.VarChar(255)
  confirmation         Boolean?           @default(false)
  mediaPath            String?
  mediaName            String?
  companyId            Int
  contactListId        Int?
  whatsappId           Int?
  scheduledAt          DateTime?          @db.Timestamptz(6)
  completedAt          DateTime?          @db.Timestamptz(6)
  createdAt            DateTime           @db.Timestamptz(6)
  updatedAt            DateTime           @db.Timestamptz(6)
  fileListId           Int?
  flow                 String?            @db.VarChar(255)
  sector               String?            @db.VarChar(255)
  attendantId          Int?
  tag                  String?            @db.VarChar(255)
  ticketStatus         String?            @db.VarChar(255)
  flowOnly             Boolean            @default(false)
  templateName         String?            @db.VarChar(255)
  templateLanguage     String?            @db.VarChar(255)
  templateComponents   String?
  useTemplate          Boolean            @default(false)
  message6             String?            @default("")
  message7             String?            @default("")
  message8             String?            @default("")
  message9             String?            @default("")
  message10            String?            @default("")
  randomizeMessages    Boolean            @default(false)
  CampaignLogs         CampaignLogs[]
  CampaignShipping     CampaignShipping[]
  Companies            Companies          @relation(fields: [companyId], references: [id], onDelete: Cascade)
  ContactLists         ContactLists?      @relation(fields: [contactListId], references: [id], onUpdate: SetNull)
  Files                Files?             @relation(fields: [fileListId], references: [id])
  Whatsapps            Whatsapps?         @relation(fields: [whatsappId], references: [id], onUpdate: SetNull)
}

model CampoWebhooks {
  id                                              Int        @id @default(autoincrement())
  name                                            String     @db.VarChar(255)
  createdAt                                       DateTime   @db.Timestamptz(6)
  updatedAt                                       DateTime   @db.Timestamptz(6)
  webhookId                                       Int
  Webhooks_CampoWebhooks_webhookIdToWebhooks      Webhooks   @relation("CampoWebhooks_webhookIdToWebhooks", fields: [webhookId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  Webhooks_Webhooks_campoWebhookIdToCampoWebhooks Webhooks[] @relation("Webhooks_campoWebhookIdToCampoWebhooks")
}

model ChatImports {
  id                           Int       @id @default(autoincrement())
  companyId                    Int
  isGroupImportActive          Boolean?  @default(false)
  shouldCloseTicketAfterImport Boolean?  @default(false)
  importStartTime              DateTime? @db.Timestamptz(6)
  importEndTime                DateTime? @db.Timestamptz(6)
  createdAt                    DateTime  @db.Timestamptz(6)
  updatedAt                    DateTime  @db.Timestamptz(6)
}

model ChatMessages {
  id                 Int            @id @default(autoincrement())
  chatId             Int
  senderId           Int
  message            String?        @default("")
  mediaPath          String?
  mediaName          String?
  createdAt          DateTime       @db.Timestamptz(6)
  updatedAt          DateTime       @db.Timestamptz(6)
  typeFile           String?        @db.VarChar(255)
  replyToId          Int?
  Chats              Chats          @relation(fields: [chatId], references: [id], onDelete: Cascade)
  ChatMessages       ChatMessages?  @relation("ChatMessagesToChatMessages", fields: [replyToId], references: [id])
  other_ChatMessages ChatMessages[] @relation("ChatMessagesToChatMessages")
  Users              Users          @relation(fields: [senderId], references: [id], onDelete: Cascade)
}

model ChatUsers {
  id        Int      @id @default(autoincrement())
  chatId    Int
  userId    Int
  unreads   Int?     @default(0)
  createdAt DateTime @db.Timestamptz(6)
  updatedAt DateTime @db.Timestamptz(6)
  Chats     Chats    @relation(fields: [chatId], references: [id], onDelete: Cascade)
  Users     Users    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Chatbots {
  id              Int              @id @default(autoincrement())
  name            String           @db.VarChar(255)
  queueId         Int?
  chatbotId       Int?
  greetingMessage String?
  createdAt       DateTime         @db.Timestamptz(6)
  updatedAt       DateTime         @db.Timestamptz(6)
  isAgent         Boolean?         @default(false)
  optionType      String?          @default("text") @db.VarChar(255)
  Chatbots        Chatbots?        @relation("ChatbotsToChatbots", fields: [chatbotId], references: [id], onDelete: Cascade)
  other_Chatbots  Chatbots[]       @relation("ChatbotsToChatbots")
  Queues          Queues?          @relation(fields: [queueId], references: [id], onDelete: Cascade)
  DialogChatBots  DialogChatBots[]
}

model Chats {
  id           Int            @id @default(autoincrement())
  title        String?        @default("")
  uuid         String?        @default("") @db.VarChar(255)
  ownerId      Int
  lastMessage  String?
  companyId    Int
  createdAt    DateTime       @db.Timestamptz(6)
  updatedAt    DateTime       @db.Timestamptz(6)
  ChatMessages ChatMessages[]
  ChatUsers    ChatUsers[]
  Companies    Companies      @relation(fields: [companyId], references: [id], onDelete: Cascade)
  Users        Users          @relation(fields: [ownerId], references: [id], onDelete: Cascade)
}

model ChatsImport {
  id           Int       @id @default(autoincrement())
  whatsappId   Int
  messageCount Int
  messages     Json?
  createdAt    DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt    DateTime  @default(now()) @db.Timestamptz(6)
  Whatsapps    Whatsapps @relation(fields: [whatsappId], references: [id], onDelete: Cascade)
}

model Companies {
  id                       Int                        @id @default(autoincrement())
  name                     String                     @unique @db.VarChar(255)
  phone                    String?                    @db.VarChar(255)
  email                    String?                    @db.VarChar(255)
  createdAt                DateTime                   @db.Timestamptz(6)
  updatedAt                DateTime                   @db.Timestamptz(6)
  planId                   Int?
  status                   Boolean?                   @default(true)
  schedules                Json?                      @default("[]")
  dueDate                  DateTime?                  @db.Timestamptz(6)
  recurrence               String?                    @default("") @db.VarChar(255)
  document                 String?                    @default("") @db.VarChar(255)
  paymentMethod            String?                    @default("") @db.VarChar(255)
  lastLogin                DateTime?                  @db.Timestamptz(6)
  verificationToken        String?                    @db.VarChar(255)
  isVerified               Boolean?                   @default(false)
  token                    String?                    @db.VarChar(255)
  whitelabel               Boolean                    @default(false)
  dominio                  String?                    @db.VarChar(255)
  AgendamentoEmails        AgendamentoEmails[]
  AnnouncementVisibilities AnnouncementVisibilities[]
  Announcements            Announcements[]
  BlackLists               BlackLists[]
  CampaignSettings         CampaignSettings[]
  Campaigns                Campaigns[]
  Chats                    Chats[]
  Plans                    Plans?                     @relation(fields: [planId], references: [id])
  CompanySockets           CompanySockets[]
  ContactListItems         ContactListItems[]
  ContactLists             ContactLists[]
  Contacts                 Contacts[]
  Emails                   Emails[]
  Eventos                  Eventos[]
  Files                    Files[]
  Integrations             Integrations[]
  Invoices                 Invoices[]
  Keywords                 Keywords[]
  Messages                 Messages[]
  Prompts                  Prompts[]
  QueueIntegrations        QueueIntegrations[]
  Queues                   Queues[]
  QuickMessages            QuickMessages[]
  Ratings                  Ratings[]
  Schedules                Schedules[]
  Settings                 Settings[]                 @ignore
  StatusTicket             StatusTicket[]
  Subscription             Subscription[]
  Subscriptions            Subscriptions[]
  Tags                     Tags[]
  Tasks                    Tasks[]
  TicketTraking            TicketTraking[]
  Tickets                  Tickets[]
  UserRatings              UserRatings[]
  Users                    Users[]
  Webhooks                 Webhooks[]
  WhatsAppApis             WhatsAppApis[]
  Whatsapps                Whatsapps[]

  @@index([planId], map: "companies_plan_id")
  @@index([status], map: "companies_status")
}

model CompanySockets {
  id        Int       @id @default(autoincrement())
  companyId Int
  socketId  String    @db.VarChar(255)
  createdAt DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt DateTime  @default(now()) @db.Timestamptz(6)
  Companies Companies @relation(fields: [companyId], references: [id], onDelete: Cascade)
}

model Configurations {
  id                       Int      @id @default(autoincrement())
  nomeSistema              String?  @db.VarChar(255)
  numeroSuporte            String?  @db.VarChar(255)
  codigoCor                String?  @db.VarChar(255)
  logo                     Bytes?
  mensagemWhatsApp         String?
  mensagemEmail            String?
  createdAt                DateTime @db.Timestamptz(6)
  updatedAt                DateTime @db.Timestamptz(6)
  mensagemRedefinicaoSenha String?
  logoLogin                Bytes?
  logoBanner               Bytes?
  primaryDark              String?  @db.VarChar(255)
  textPrimary              String?  @db.VarChar(255)
  tabHeaderBackground      String?  @db.VarChar(255)
  options                  String?  @db.VarChar(255)
  fancyBackground          String?  @db.VarChar(255)
  inputdigita              String?  @db.VarChar(255)
  login                    String?  @db.VarChar(255)
  barraSuperior            String?  @db.VarChar(255)
  companyId                Int?
  TicketsManagerTabs       String?  @db.VarChar(255)
  Login                    String?  @db.VarChar(255)
  FundoLogin               Bytes?
  fundologin               String?
  codigoCorfundo           String?  @db.VarChar(255)
  Cadastro                 String?  @db.VarChar(255)
  Dashboard                String?  @db.VarChar(255)
  nomeLogo                 String?  @db.VarChar(255)
  nomeLogoLogin            String?  @db.VarChar(255)
  nomeBanner               String?  @db.VarChar(255)
  politicaPrivacidade      String?
  termosDeUso              String?
  logoDark                 String?  @db.VarChar(255)
  logoLoginDark            String?  @db.VarChar(255)
  logoBannerDark           String?  @db.VarChar(255)
  appBarColor              String?  @db.VarChar(255)
  sidebarColor             String?  @db.VarChar(255)
  appBarColorDark          String?  @db.VarChar(255)
  sidebarColorDark         String?  @db.VarChar(255)
  mensagemOTP              String?
  mostrarLinkCadastro      Boolean? @default(true)
}

model ContactCustomFields {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(255)
  value     String   @db.VarChar(255)
  contactId Int
  createdAt DateTime @db.Timestamptz(6)
  updatedAt DateTime @db.Timestamptz(6)
  Contacts  Contacts @relation(fields: [contactId], references: [id], onDelete: Cascade)
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model ContactListItems {
  id               Int                @id @default(autoincrement())
  name             String             @db.VarChar(255)
  number           String             @db.VarChar(255)
  email            String?            @db.VarChar(255)
  contactListId    Int
  isWhatsappValid  Boolean?           @default(false)
  companyId        Int?
  createdAt        DateTime           @db.Timestamptz(6)
  updatedAt        DateTime           @db.Timestamptz(6)
  CampaignShipping CampaignShipping[]
  Companies        Companies?         @relation(fields: [companyId], references: [id], onDelete: Cascade)
  ContactLists     ContactLists       @relation(fields: [contactListId], references: [id], onDelete: Cascade)

  @@index([contactListId], map: "idx_ctli_contact_list_id")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model ContactLists {
  id               Int                @id @default(autoincrement())
  name             String             @db.VarChar(255)
  companyId        Int?
  createdAt        DateTime           @db.Timestamptz(6)
  updatedAt        DateTime           @db.Timestamptz(6)
  Campaigns        Campaigns[]
  ContactListItems ContactListItems[]
  Companies        Companies?         @relation(fields: [companyId], references: [id], onDelete: Cascade)
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Contacts {
  id                  Int                   @id @default(autoincrement())
  name                String                @db.VarChar(255)
  number              String                @db.VarChar(255)
  profilePicUrl       String?
  createdAt           DateTime              @db.Timestamptz(6)
  updatedAt           DateTime              @db.Timestamptz(6)
  email               String                @default("") @db.VarChar(255)
  isGroup             Boolean               @default(false)
  companyId           Int?
  acceptAudioMessage  Boolean               @default(true)
  channel             String?               @default("whatsapp")
  active              Boolean?              @default(true)
  disableBot          Boolean               @default(false)
  whatsappId          Int?
  additionalData      Json?                 @db.Json
  walleteUserId       Int?
  userName            String?               @db.VarChar(255)
  isBlacklisted       Boolean               @default(false)
  chatId              String?               @db.VarChar(255)
  BlackListContacts   BlackListContacts[]
  ContactCustomFields ContactCustomFields[]
  Companies           Companies?            @relation(fields: [companyId], references: [id])
  Whatsapps           Whatsapps?            @relation(fields: [whatsappId], references: [id])
  DialogChatBots      DialogChatBots[]
  KeywordMessages     KeywordMessages[]
  Messages            Messages[]
  Schedules           Schedules[]
  TicketNotes         TicketNotes[]
  TicketTags          TicketTags[]          @ignore
  Tickets             Tickets[]
  WhatsappLidMaps     WhatsappLidMaps[]

  @@unique([number, companyId, whatsappId], map: "number_companyid_whatsappid_unique")
  @@index([companyId], map: "idx_cont_company_id")
  @@index([name], map: "idx_contacts_name")
  @@index([number], map: "idx_contacts_number")
}

model DialogChatBots {
  id        Int       @id @default(autoincrement())
  awaiting  Int       @default(0)
  contactId Int?
  chatbotId Int?
  createdAt DateTime  @db.Timestamptz(6)
  updatedAt DateTime  @db.Timestamptz(6)
  queueId   Int?
  Chatbots  Chatbots? @relation(fields: [chatbotId], references: [id])
  Contacts  Contacts? @relation(fields: [contactId], references: [id], onDelete: Cascade)
  Queues    Queues?   @relation(fields: [queueId], references: [id])
}

model Emails {
  id        Int        @id @default(autoincrement())
  sender    String?    @db.VarChar(255)
  subject   String?    @db.VarChar(255)
  message   String?
  companyId Int?
  createdAt DateTime   @db.Timestamptz(6)
  updatedAt DateTime   @db.Timestamptz(6)
  scheduled Boolean?
  sendAt    DateTime?  @db.Timestamptz(6)
  Companies Companies? @relation(fields: [companyId], references: [id], onDelete: Cascade)
}

model Eventos {
  id          Int       @id @default(autoincrement())
  title       String    @db.VarChar(255)
  description String?
  start       DateTime  @db.Timestamptz(6)
  end         DateTime  @db.Timestamptz(6)
  concluido   Boolean?  @default(false)
  companyId   Int
  createdAt   DateTime  @db.Timestamptz(6)
  updatedAt   DateTime  @db.Timestamptz(6)
  Companies   Companies @relation(fields: [companyId], references: [id], onDelete: Cascade)
}

model Files {
  id           Int            @id @default(autoincrement())
  companyId    Int
  name         String         @db.VarChar(255)
  message      String
  createdAt    DateTime       @db.Timestamptz(6)
  updatedAt    DateTime       @db.Timestamptz(6)
  Campaigns    Campaigns[]
  Companies    Companies      @relation(fields: [companyId], references: [id], onDelete: Cascade)
  FilesOptions FilesOptions[]
}

model FilesOptions {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(255)
  path      String   @db.VarChar(255)
  fileId    Int
  createdAt DateTime @db.Timestamptz(6)
  updatedAt DateTime @db.Timestamptz(6)
  mediaType String?  @default("") @db.VarChar(255)
  Files     Files    @relation(fields: [fileId], references: [id], onDelete: Cascade)
}

model FlowIntegracoes {
  id           Int      @id @default(autoincrement())
  companyId    Int
  name         String   @db.VarChar(255)
  clientId     String   @db.VarChar(255)
  clientSecret String   @db.VarChar(255)
  accessToken  String   @db.VarChar(255)
  refreshToken String   @db.VarChar(255)
  expiresIn    Int
  tokenType    String   @db.VarChar(255)
  expiresAt    DateTime @db.Timestamptz(6)
  createdAt    DateTime @default(now()) @db.Timestamptz(6)
  updatedAt    DateTime @default(now()) @db.Timestamptz(6)
  type         String?  @db.VarChar(255)
}

model FlowUpClients {
  id             Int       @id @default(autoincrement())
  flowUpId       Int
  ticketId       Int
  currentDay     Int       @default(1)
  remainingDays  Int       @default(0)
  createdAt      DateTime  @db.Timestamptz(6)
  updatedAt      DateTime  @db.Timestamptz(6)
  lastFlowUpSent DateTime? @db.Timestamptz(6)
  FlowUps        FlowUps   @relation(fields: [flowUpId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  Tickets        Tickets   @relation(fields: [ticketId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model FlowUpMessages {
  id        Int      @id @default(autoincrement())
  flowUpId  Int
  text      String
  file      String?  @db.VarChar(255)
  dayNumber Int      @default(1)
  createdAt DateTime @db.Timestamptz(6)
  updatedAt DateTime @db.Timestamptz(6)
  FlowUps   FlowUps  @relation(fields: [flowUpId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model FlowUps {
  id                   Int              @id @default(autoincrement())
  companyId            Int
  name                 String           @db.VarChar(255)
  daysBefore           Int
  timeRange            String           @db.VarChar(255)
  startToday           Boolean          @default(false)
  removeOnReply        Boolean          @default(false)
  createdAt            DateTime         @db.Timestamptz(6)
  updatedAt            DateTime         @db.Timestamptz(6)
  repeatMode           String           @default("once") @db.VarChar(255)
  repeatInterval       Int              @default(1)
  repeatDays           String?          @default("[]")
  repeatMonthDay       Int?             @default(1)
  maxRepetitions       Int?             @default(0)
  stopOnReply          Boolean?         @default(true)
  stopOnUnsubscribe    Boolean?         @default(true)
  stopOnError          Boolean?         @default(true)
  maxErrors            Int?             @default(3)
  scheduleType         String?          @default("immediate") @db.VarChar(255)
  scheduleDate         DateTime?        @db.Timestamptz(6)
  scheduleTime         String?          @default("09:00") @db.VarChar(255)
  priority             String?          @default("normal") @db.VarChar(255)
  maxContactsPerDay    Int?             @default(0)
  delayBetweenMessages Int?             @default(0)
  repeatHours          Int?             @default(1)
  useCustomSchedule    Boolean          @default(false)
  customIntervals      String           @default("[]")
  startDate            DateTime?        @db.Timestamptz(6)
  useSpecificTimes     Boolean          @default(false)
  specificTimes        String           @default("[]")
  FlowUpClients        FlowUpClients[]
  FlowUpMessages       FlowUpMessages[]
}

model Flows {
  id                                            String      @id @db.Uuid
  nodes                                         Json?       @db.Json
  edges                                         Json?       @db.Json
  companyId                                     Int
  createdAt                                     DateTime    @default(now()) @db.Timestamptz(6)
  updatedAt                                     DateTime    @default(now()) @db.Timestamptz(6)
  name                                          String?     @db.VarChar(255)
  schedule                                      Json?       @db.Json
  offHoursMessage                               String?
  keywords                                      Json?       @db.Json
  quantidadeEnvios                              Int         @default(1)
  Tickets                                       Tickets[]
  Whatsapps_Whatsapps_firstContactFlowIdToFlows Whatsapps[] @relation("Whatsapps_firstContactFlowIdToFlows")
  Whatsapps_Whatsapps_flowIdToFlows             Whatsapps[] @relation("Whatsapps_flowIdToFlows")
}

model Helps {
  id          Int      @id @default(autoincrement())
  title       String   @db.VarChar(255)
  description String?
  video       String?  @db.VarChar(255)
  link        String?
  createdAt   DateTime @db.Timestamptz(6)
  updatedAt   DateTime @db.Timestamptz(6)
}

model Integrations {
  id                  Int       @id @default(autoincrement())
  companyId           Int
  name                String    @db.VarChar(255)
  isActive            Boolean?  @default(false)
  token               String?
  foneContact         String?   @db.VarChar(255)
  userLogin           String?   @db.VarChar(255)
  passLogin           String?   @db.VarChar(255)
  finalCurrentMonth   Int?
  initialCurrentMonth Int?
  createdAt           DateTime  @db.Timestamptz(6)
  updatedAt           DateTime  @db.Timestamptz(6)
  Companies           Companies @relation(fields: [companyId], references: [id], onDelete: SetNull)
}

model Invoices {
  id              Int       @id @default(autoincrement())
  companyId       Int
  dueDate         String?   @db.VarChar(255)
  detail          String?   @db.VarChar(255)
  status          String?   @db.VarChar(255)
  value           Float?
  users           Int?      @default(0)
  connections     Int?      @default(0)
  queues          Int?      @default(0)
  useWhatsapp     Boolean?  @default(true)
  useFacebook     Boolean?  @default(true)
  useInstagram    Boolean?  @default(true)
  useCampaigns    Boolean?  @default(true)
  useSchedules    Boolean?  @default(true)
  useInternalChat Boolean?  @default(true)
  useExternalApi  Boolean?  @default(true)
  createdAt       DateTime  @db.Timestamptz(6)
  updatedAt       DateTime  @db.Timestamptz(6)
  useTypebot      Boolean   @default(false)
  useN8n          Boolean   @default(false)
  useChatGPT      Boolean   @default(false)
  Companies       Companies @relation(fields: [companyId], references: [id], onDelete: SetNull)
}

model KeywordMessages {
  id        Int      @id @default(autoincrement())
  keywordId Int
  contactId Int
  message   String
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @db.Timestamptz(6)
  Contacts  Contacts @relation(fields: [contactId], references: [id], onDelete: Cascade)
  Keywords  Keywords @relation(fields: [keywordId], references: [id], onDelete: Cascade)
}

model Keywords {
  id              Int               @id @default(autoincrement())
  name            String            @db.VarChar(255)
  whatsappId      Int
  companyId       Int
  keyword         String            @db.VarChar(255)
  createdAt       DateTime          @default(now()) @db.Timestamptz(6)
  updatedAt       DateTime          @default(now()) @db.Timestamptz(6)
  KeywordMessages KeywordMessages[]
  Companies       Companies         @relation(fields: [companyId], references: [id], onDelete: Cascade)
  Whatsapps       Whatsapps         @relation(fields: [whatsappId], references: [id], onDelete: Cascade)
}

model MessageImportStatuses {
  id               Int       @id @default(autoincrement())
  whatsappId       Int
  totalMessages    Int
  importedMessages Int       @default(0)
  createdAt        DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime  @default(now()) @db.Timestamptz(6)
  status           String    @default("pending") @db.VarChar(255)
  Whatsapps        Whatsapps @relation(fields: [whatsappId], references: [id], onDelete: Cascade)
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Messages {
  id                String        @id @db.VarChar(255)
  body              String
  ack               Int           @default(0)
  read              Boolean       @default(false)
  mediaType         String?       @db.VarChar(255)
  mediaUrl          String?       @db.VarChar(255)
  ticketId          Int
  createdAt         DateTime      @db.Timestamptz(6)
  updatedAt         DateTime      @db.Timestamptz(6)
  fromMe            Boolean       @default(false)
  isDeleted         Boolean       @default(false)
  contactId         Int?
  quotedMsgId       String?       @db.VarChar(255)
  companyId         Int?
  remoteJid         String?
  dataJson          String?
  participant       String?
  queueId           Int?
  isEdited          Boolean       @default(false)
  transcription     String?
  reaction          String?       @db.VarChar(255)
  isReacted         Boolean       @default(false)
  reactionFromMe    Boolean       @default(false)
  isReview          Boolean       @default(false)
  originalMessageId String?       @db.VarChar(255)
  metaTemplateName  String?       @db.VarChar(255)
  metaMessageStatus String?       @db.VarChar(255)
  Companies         Companies?    @relation(fields: [companyId], references: [id])
  Contacts          Contacts?     @relation(fields: [contactId], references: [id], onDelete: Cascade)
  Queues            Queues?       @relation(fields: [queueId], references: [id], onUpdate: SetNull)
  Messages          Messages?     @relation("MessagesToMessages", fields: [quotedMsgId], references: [id])
  other_Messages    Messages[]    @relation("MessagesToMessages")
  Tickets           Tickets       @relation(fields: [ticketId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  OldMessages       OldMessages[]

  @@index([companyId], map: "idx_company_id")
  @@index([createdAt], map: "idx_created_at")
  @@index([ticketId], map: "idx_messages_ticket_id")
  @@index([companyId, ticketId], map: "idx_ms_company_id_ticket_id")
  @@index([ticketId, companyId], map: "idx_ticket_company")
  @@index([ticketId], map: "idx_ticket_id")
  @@index([companyId], map: "messages_company_id")
  @@index([createdAt], map: "messages_created_at")
  @@index([ticketId], map: "messages_ticket_id")
  @@index([ticketId, companyId], map: "messages_ticket_id_company_id")
}

model NotyNodes {
  id           Int      @id @default(autoincrement())
  ticketId     Int
  notifyNumber String?  @db.VarChar(255)
  createdAt    DateTime @default(now()) @db.Timestamptz(6)
  updatedAt    DateTime @default(now()) @db.Timestamptz(6)
  Tickets      Tickets  @relation(fields: [ticketId], references: [id], onDelete: Cascade)
}

model OldMessages {
  id        Int      @id @default(autoincrement())
  messageId String   @db.VarChar(255)
  body      String
  createdAt DateTime @db.Timestamptz(6)
  updatedAt DateTime @db.Timestamptz(6)
  Messages  Messages @relation(fields: [messageId], references: [id], onDelete: Cascade)
}

model Pixels {
  id         String   @id @db.Uuid
  nome       String?  @db.VarChar(255)
  pixel      String?  @db.VarChar(255)
  companyId  Int      @default(0)
  url        String?  @db.VarChar(255)
  convercoes Int      @default(0)
  createdAt  DateTime @db.Timestamptz(6)
  updatedAt  DateTime @db.Timestamptz(6)
  whatsappId String?  @db.VarChar(255)
  message    String?  @db.VarChar(255)
}

model Plans {
  id              Int         @id @default(autoincrement())
  name            String      @unique @db.VarChar(255)
  users           Int?        @default(0)
  connections     Int?        @default(0)
  queues          Int?        @default(0)
  createdAt       DateTime    @db.Timestamptz(6)
  updatedAt       DateTime    @db.Timestamptz(6)
  amount          String?     @db.VarChar(255)
  useFacebook     Boolean?    @default(true)
  useInstagram    Boolean?    @default(true)
  useWhatsapp     Boolean?    @default(true)
  useCampaigns    Boolean?    @default(true)
  useExternalApi  Boolean?    @default(true)
  useInternalChat Boolean?    @default(true)
  useSchedules    Boolean?    @default(true)
  useKanban       Boolean?    @default(true)
  useOpenAi       Boolean?    @default(true)
  useIntegrations Boolean?    @default(true)
  memory          Int?
  useTypebot      Boolean     @default(false)
  useN8n          Boolean     @default(false)
  useChatGPT      Boolean     @default(false)
  usePlanoTeste   Boolean?
  useConnectAi    Boolean     @default(false)
  Companies       Companies[]
}

model Prompts {
  id                              Int         @id @default(autoincrement())
  name                            String
  apiKey                          String
  prompt                          String
  maxTokens                       Int         @default(100)
  maxMessages                     Int         @default(10)
  temperature                     Int         @default(1)
  promptTokens                    Int         @default(0)
  completionTokens                Int         @default(0)
  totalTokens                     Int         @default(0)
  voice                           String?
  voiceKey                        String?
  voiceRegion                     String?
  queueId                         Int
  companyId                       Int
  createdAt                       DateTime    @db.Timestamptz(6)
  updatedAt                       DateTime    @db.Timestamptz(6)
  Companies                       Companies   @relation(fields: [companyId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Queues_Prompts_queueIdToQueues  Queues      @relation("Prompts_queueIdToQueues", fields: [queueId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Queues_Queues_promptIdToPrompts Queues[]    @relation("Queues_promptIdToPrompts")
  Tickets                         Tickets[]
  Whatsapps                       Whatsapps[]
}

model QueueIntegrations {
  id                    Int         @id @default(autoincrement())
  type                  String      @db.VarChar(255)
  name                  String      @unique @db.VarChar(255)
  projectName           String      @unique @db.VarChar(255)
  jsonContent           String
  language              String      @db.VarChar(255)
  createdAt             DateTime    @db.Timestamptz(6)
  updatedAt             DateTime    @db.Timestamptz(6)
  urlN8N                String      @default(dbgenerated("true")) @db.VarChar(255)
  companyId             Int?
  typebotSlug           String      @default("") @db.VarChar(255)
  typebotExpires        Int         @default(0)
  typebotKeywordFinish  String      @default("") @db.VarChar(255)
  typebotUnknownMessage String      @default("") @db.VarChar(255)
  typebotDelayMessage   Int         @default(1000)
  typebotKeywordRestart String?     @default("") @db.VarChar(255)
  typebotRestartMessage String?     @default("") @db.VarChar(255)
  aiToken               String?
  aiPrompt              String?
  webhookEnabled        Boolean?    @default(false)
  webhookSendOnOpen     Boolean?    @default(false)
  webhookSendOnPending  Boolean?    @default(false)
  webhookSendTags       Boolean?    @default(false)
  webhookSendSectors    Boolean?    @default(false)
  webhookSendBotMessage Boolean?    @default(false)
  Companies             Companies?  @relation(fields: [companyId], references: [id])
  Queues                Queues[]
  Tickets               Tickets[]
  Whatsapps             Whatsapps[]
}

model QueueOptions {
  id                 Int            @id @default(autoincrement())
  title              String         @db.VarChar(255)
  message            String?
  option             String?
  queueId            Int?
  parentId           Int?
  createdAt          DateTime       @db.Timestamptz(6)
  updatedAt          DateTime       @db.Timestamptz(6)
  optionType         String?        @db.VarChar(255)
  QueueOptions       QueueOptions?  @relation("QueueOptionsToQueueOptions", fields: [parentId], references: [id], onDelete: Cascade)
  other_QueueOptions QueueOptions[] @relation("QueueOptionsToQueueOptions")
  Queues             Queues?        @relation(fields: [queueId], references: [id], onDelete: Cascade)
  Tickets            Tickets[]
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Queues {
  id                               Int                @id @default(autoincrement())
  name                             String             @db.VarChar(255)
  color                            String             @db.VarChar(255)
  greetingMessage                  String?
  createdAt                        DateTime           @db.Timestamptz(6)
  updatedAt                        DateTime           @db.Timestamptz(6)
  companyId                        Int?
  schedules                        Json?              @default("[]")
  outOfHoursMessage                String?
  orderQueue                       Int?
  integrationId                    Int?
  promptId                         Int?
  options                          Json?              @default("[]")
  Chatbots                         Chatbots[]
  DialogChatBots                   DialogChatBots[]
  Messages                         Messages[]
  Prompts_Prompts_queueIdToQueues  Prompts[]          @relation("Prompts_queueIdToQueues")
  QueueOptions                     QueueOptions[]
  Companies                        Companies?         @relation(fields: [companyId], references: [id])
  QueueIntegrations                QueueIntegrations? @relation(fields: [integrationId], references: [id])
  Prompts_Queues_promptIdToPrompts Prompts?           @relation("Queues_promptIdToPrompts", fields: [promptId], references: [id])
  Schedules                        Schedules[]
  Tickets                          Tickets[]

  @@unique([color, companyId], map: "Queues_color_key")
  @@unique([name, companyId], map: "Queues_name_key")
  @@index([id], map: "idx_queues_id")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model QuickMessages {
  id           Int        @id @default(autoincrement())
  shortcode    String     @db.VarChar(255)
  message      String?
  companyId    Int?
  createdAt    DateTime   @db.Timestamptz(6)
  updatedAt    DateTime   @db.Timestamptz(6)
  userId       Int?
  mediaPath    String?    @db.VarChar(255)
  mediaName    String?    @db.VarChar(255)
  geral        Boolean    @default(false)
  messages     String?
  mediaFiles   String?
  fileMessages String?
  Companies    Companies? @relation(fields: [companyId], references: [id], onDelete: Cascade)
  Users        Users?     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Ratings {
  id               Int               @id @default(autoincrement())
  companyId        Int
  name             String            @db.VarChar(255)
  message          String
  createdAt        DateTime          @db.Timestamptz(6)
  updatedAt        DateTime          @db.Timestamptz(6)
  type             enum_Ratings_type @default(message)
  webCustomization Json?             @db.Json
  Companies        Companies         @relation(fields: [companyId], references: [id], onDelete: Cascade)
  RatingsOptions   RatingsOptions[]
  TicketTraking    TicketTraking[]
  Tickets          Tickets[]
  UserRatings      UserRatings[]
}

model RatingsOptions {
  id          Int           @id @default(autoincrement())
  name        String        @db.VarChar(255)
  value       String        @db.VarChar(255)
  ratingId    Int
  createdAt   DateTime      @db.Timestamptz(6)
  updatedAt   DateTime      @db.Timestamptz(6)
  Ratings     Ratings       @relation(fields: [ratingId], references: [id], onDelete: Cascade)
  UserRatings UserRatings[]
}

model RequestLogs {
  id        Int      @id @default(autoincrement())
  method    String?  @db.VarChar(255)
  url       String?  @db.VarChar(255)
  status    Int?
  duration  String?  @db.VarChar(255)
  ip        String?  @db.VarChar(255)
  cidade    String?  @db.VarChar(255)
  estado    String?  @db.VarChar(255)
  pais      String?  @db.VarChar(255)
  userId    Int?
  body      Json?
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @db.Timestamptz(6)
  Users     Users?   @relation(fields: [userId], references: [id])
}

model Schedules {
  id                  Int        @id @default(autoincrement())
  body                String
  sendAt              DateTime?  @db.Timestamptz(6)
  sentAt              DateTime?  @db.Timestamptz(6)
  contactId           Int?
  ticketId            Int?
  userId              Int?
  companyId           Int?
  createdAt           DateTime   @db.Timestamptz(6)
  updatedAt           DateTime   @db.Timestamptz(6)
  status              String?    @db.VarChar(255)
  mediaPath           String?
  mediaName           String?
  recurrence          Boolean?
  openTicket          Boolean?
  connection          String?    @db.VarChar(255)
  queueId             Int?
  recurrence2         String?    @db.VarChar(255)
  recurrencedia       String?    @db.VarChar(255)
  recurrencediasemana String?    @db.VarChar(255)
  Companies           Companies? @relation(fields: [companyId], references: [id], onDelete: Cascade)
  Contacts            Contacts?  @relation(fields: [contactId], references: [id], onDelete: Cascade)
  Queues              Queues?    @relation(fields: [queueId], references: [id])
  Tickets             Tickets?   @relation(fields: [ticketId], references: [id], onUpdate: SetNull)
  Users               Users?     @relation(fields: [userId], references: [id], onUpdate: SetNull)

  @@index([companyId], map: "idx_sched_company_id")
}

model SequelizeMeta {
  name String @id @db.VarChar(255)
}

model ServerData {
  id        Int      @id @default(autoincrement())
  totalmem  String?  @db.VarChar(255)
  freemem   String?  @db.VarChar(255)
  cpuUsage  Int?
  createdAt DateTime @db.Timestamptz(6)
  updatedAt DateTime @db.Timestamptz(6)
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model Settings {
  key       String     @db.VarChar(255)
  value     String
  createdAt DateTime   @db.Timestamptz(6)
  updatedAt DateTime   @db.Timestamptz(6)
  companyId Int?
  id        Int        @default(autoincrement())
  Companies Companies? @relation(fields: [companyId], references: [id])

  @@ignore
}

model SiteIntegrations {
  id          Int      @id @default(autoincrement())
  name        String?  @db.VarChar(255)
  companyId   Int?
  accessCount Int?     @default(0)
  url         String?  @db.VarChar(255)
  connection  String?  @db.VarChar(255)
  phoneNumber String?  @db.VarChar(255)
  createdAt   DateTime @db.Timestamptz(6)
  updatedAt   DateTime @db.Timestamptz(6)
  urlSite     String?  @db.VarChar(255)
}

model StatusTicket {
  id           Int            @id @default(autoincrement())
  priority     Int?
  title        String         @db.VarChar(255)
  text         String
  color        String         @db.VarChar(255)
  mediaPath    String?
  mediaName    String?
  companyId    Int
  status       Boolean?
  createdAt    DateTime       @db.Timestamptz(6)
  updatedAt    DateTime       @db.Timestamptz(6)
  Companies    Companies      @relation(fields: [companyId], references: [id], onDelete: Cascade)
  TicketStatus TicketStatus[] @ignore
}

model Subscription {
  id             Int       @id @default(autoincrement())
  endpoint       String    @db.VarChar(255)
  expirationTime DateTime? @db.Timestamptz(6)
  keys           Json      @db.Json
  companyId      Int
  userId         Int
  createdAt      DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt      DateTime  @default(now()) @db.Timestamptz(6)
  Companies      Companies @relation(fields: [companyId], references: [id], onDelete: Cascade)
  Users          Users     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Subscriptions {
  id                     Int        @id @default(autoincrement())
  isActive               Boolean?   @default(false)
  expiresAt              DateTime   @db.Timestamptz(6)
  userPriceCents         Int?
  whatsPriceCents        Int?
  lastInvoiceUrl         String?    @db.VarChar(255)
  lastPlanChange         DateTime?  @db.Timestamptz(6)
  companyId              Int?
  providerSubscriptionId String     @db.VarChar(255)
  createdAt              DateTime   @db.Timestamptz(6)
  updatedAt              DateTime   @db.Timestamptz(6)
  Companies              Companies? @relation(fields: [companyId], references: [id], onDelete: Cascade)
}

model SystemMeta {
  id        Int      @id @default(autoincrement())
  value     String
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @db.Timestamptz(6)
}

model Tags {
  id            Int          @id @default(autoincrement())
  name          String       @db.VarChar(255)
  color         String?      @db.VarChar(255)
  companyId     Int
  createdAt     DateTime     @db.Timestamptz(6)
  updatedAt     DateTime     @db.Timestamptz(6)
  kanban        Int?
  orderTag      Int?
  kanbanMessage String?
  Companies     Companies    @relation(fields: [companyId], references: [id], onDelete: Cascade)
  TicketTags    TicketTags[] @ignore

  @@index([companyId], map: "idx_tg_company_id")
}

model Tasks {
  id          Int       @id @default(autoincrement())
  text        String?   @db.VarChar(255)
  description String?
  created_at  DateTime  @db.Timestamptz(6)
  updated_at  DateTime  @db.Timestamptz(6)
  companyId   Int
  userId      Int?
  Companies   Companies @relation(fields: [companyId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Users       Users?    @relation(fields: [userId], references: [id])
}

model TicketLogs {
  id        Int      @id @default(autoincrement())
  ticketId  Int
  type      String   @db.VarChar(255)
  message   String
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @db.Timestamptz(6)
  Tickets   Tickets  @relation(fields: [ticketId], references: [id], onDelete: Cascade)
}

model TicketNotes {
  id        Int      @id @default(autoincrement())
  note      String   @db.VarChar(255)
  userId    Int?
  contactId Int
  ticketId  Int?
  createdAt DateTime @db.Timestamptz(6)
  updatedAt DateTime @db.Timestamptz(6)
  Contacts  Contacts @relation(fields: [contactId], references: [id], onDelete: Cascade)
  Tickets   Tickets? @relation(fields: [ticketId], references: [id])
  Users     Users?   @relation(fields: [userId], references: [id])
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model TicketStatus {
  ticketId       Int
  statusTicketId Int
  createdAt      DateTime     @db.Timestamptz(6)
  updatedAt      DateTime     @db.Timestamptz(6)
  StatusTicket   StatusTicket @relation(fields: [statusTicketId], references: [id], onDelete: Cascade)
  Tickets        Tickets      @relation(fields: [ticketId], references: [id], onDelete: Cascade)

  @@ignore
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model TicketTags {
  ticketId  Int?
  tagId     Int
  createdAt DateTime  @db.Timestamptz(6)
  updatedAt DateTime  @db.Timestamptz(6)
  contactId Int?
  Contacts  Contacts? @relation(fields: [contactId], references: [id], onDelete: Cascade)
  Tags      Tags      @relation(fields: [tagId], references: [id], onDelete: Cascade)
  Tickets   Tickets?  @relation(fields: [ticketId], references: [id], onDelete: Cascade)

  @@index([tagId], map: "idx_ticket_tags_tag_id")
  @@index([tagId, ticketId], map: "idx_ticket_tags_tag_ticket")
  @@index([ticketId], map: "idx_ticket_tags_ticket_id")
  @@ignore
}

model TicketTraking {
  id         Int        @id @default(autoincrement())
  ticketId   Int?
  companyId  Int?
  whatsappId Int?
  userId     Int?
  createdAt  DateTime?  @db.Timestamptz(6)
  updatedAt  DateTime?  @db.Timestamptz(6)
  queuedAt   DateTime?  @db.Timestamptz(6)
  startedAt  DateTime?  @db.Timestamptz(6)
  finishedAt DateTime?  @db.Timestamptz(6)
  ratingAt   DateTime?  @db.Timestamptz(6)
  rated      Boolean?   @default(false)
  ratingId   Int?
  chatbotAt  DateTime?  @db.Timestamptz(6)
  Companies  Companies? @relation(fields: [companyId], references: [id], onUpdate: NoAction)
  Ratings    Ratings?   @relation(fields: [ratingId], references: [id], onDelete: Cascade)
  Tickets    Tickets?   @relation(fields: [ticketId], references: [id], onUpdate: NoAction)
  Users      Users?     @relation(fields: [userId], references: [id], onUpdate: NoAction)
  Whatsapps  Whatsapps? @relation(fields: [whatsappId], references: [id], onUpdate: NoAction)
}

model TicketUser {
  id        Int      @id @default(autoincrement())
  ticketId  Int
  userId    Int
  createdAt DateTime @db.Timestamptz(6)
  updatedAt DateTime @db.Timestamptz(6)
  Tickets   Tickets  @relation(fields: [ticketId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Users     Users    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Tickets {
  id                     Int                @id @default(autoincrement())
  status                 String             @default("pending") @db.VarChar(255)
  lastMessage            String?            @default("")
  contactId              Int?
  userId                 Int?
  createdAt              DateTime           @db.Timestamptz(6)
  updatedAt              DateTime           @db.Timestamptz(6)
  whatsappId             Int?
  isGroup                Boolean            @default(false)
  unreadMessages         Int?
  queueId                Int?
  companyId              Int?
  uuid                   String?            @db.Uuid
  chatbot                Boolean?           @default(false)
  queueOptionId          Int?
  isBot                  Boolean?
  channel                String?            @default("whatsapp")
  amountUsedBotQueues    Int?
  fromMe                 Boolean            @default(false)
  useIntegration         Boolean?           @default(false)
  integrationId          Int?
  typebotSessionId       String?            @db.VarChar(255)
  typebotStatus          Boolean            @default(false)
  promptId               String?            @db.VarChar(255)
  startTypebot           Boolean            @default(false)
  secionIdTypebot        String?            @db.VarChar(255)
  specialMessage         String?            @db.VarChar(255)
  messageTypeBot         String?            @default("defaultType") @db.VarChar(255)
  prompt                 Int?
  participantIds         Int[]
  etapa                  String?            @db.VarChar(255)
  currentNodeId          String?            @db.VarChar(255)
  awaitingResponseNodeId String?            @db.Uuid
  lastNodeIdSent         String?            @db.VarChar(255)
  unreadMessagesCount    Int                @default(0)
  awaitingRating         Boolean            @default(false)
  awaitingRatingId       Int?
  awaitingUserId         Int?
  flowId                 String?            @db.Uuid
  afterHoursMessageSent  Boolean            @default(false)
  imported               DateTime?          @db.Timestamptz(6)
  menuSentCount          Int                @default(0)
  outOfOffice            Boolean            @default(false)
  flowOn                 Boolean            @default(false)
  lastMessageRead        Boolean            @default(false)
  webRatingToken         String?            @unique @db.VarChar(255)
  FlowUpClients          FlowUpClients[]
  Messages               Messages[]
  NotyNodes              NotyNodes[]
  Schedules              Schedules[]
  TicketLogs             TicketLogs[]
  TicketNotes            TicketNotes[]
  TicketStatus           TicketStatus[]     @ignore
  TicketTags             TicketTags[]       @ignore
  TicketTraking          TicketTraking[]
  TicketUser             TicketUser[]
  Ratings                Ratings?           @relation(fields: [awaitingRatingId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Companies              Companies?         @relation(fields: [companyId], references: [id])
  Contacts               Contacts?          @relation(fields: [contactId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  Flows                  Flows?             @relation(fields: [flowId], references: [id])
  QueueIntegrations      QueueIntegrations? @relation(fields: [integrationId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Prompts                Prompts?           @relation(fields: [prompt], references: [id])
  Queues                 Queues?            @relation(fields: [queueId], references: [id])
  QueueOptions           QueueOptions?      @relation(fields: [queueOptionId], references: [id], onUpdate: SetNull)
  Users                  Users?             @relation(fields: [userId], references: [id])
  Whatsapps              Whatsapps?         @relation(fields: [whatsappId], references: [id])
  UserRatings            UserRatings[]

  @@index([companyId, status, queueId], map: "idx_tickets_company_status_queue")
  @@index([createdAt], map: "idx_tickets_created_at")
  @@index([updatedAt], map: "idx_tickets_updated_at")
}

model UserQueues {
  userId    Int
  queueId   Int
  createdAt DateTime @db.Timestamptz(6)
  updatedAt DateTime @db.Timestamptz(6)

  @@id([userId, queueId])
}

model UserRatings {
  id             Int             @id @default(autoincrement())
  ticketId       Int?
  companyId      Int?
  userId         Int?
  rate           Int?            @default(0)
  createdAt      DateTime?       @db.Timestamptz(6)
  updatedAt      DateTime?       @db.Timestamptz(6)
  ratingIdOption Int?
  ratingId       Int?
  Companies      Companies?      @relation(fields: [companyId], references: [id], onUpdate: NoAction)
  RatingsOptions RatingsOptions? @relation(fields: [ratingIdOption], references: [id], onDelete: Restrict, onUpdate: Restrict)
  Ratings        Ratings?        @relation(fields: [ratingId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  Tickets        Tickets?        @relation(fields: [ticketId], references: [id], onUpdate: NoAction)
  Users          Users?          @relation(fields: [userId], references: [id], onUpdate: NoAction)
}

model UserSecurities {
  id                Int       @id @default(autoincrement())
  userId            Int?
  lastKnownIp       String?   @db.VarChar(255)
  lastOTPVerifiedAt DateTime? @db.Timestamptz(6)
  trustedIps        String?
  createdAt         DateTime? @db.Timestamptz(6)
  updatedAt         DateTime? @db.Timestamptz(6)
  Users             Users?    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Users {
  id                                      Int              @id @default(autoincrement())
  name                                    String           @db.VarChar(255)
  email                                   String           @unique @db.VarChar(255)
  passwordHash                            String           @db.VarChar(255)
  createdAt                               DateTime         @db.Timestamptz(6)
  updatedAt                               DateTime         @db.Timestamptz(6)
  profile                                 String           @default("admin") @db.VarChar(255)
  tokenVersion                            Int              @default(0)
  companyId                               Int?
  super                                   Boolean?         @default(false)
  online                                  Boolean?         @default(false)
  endWork                                 String?          @default("23:59") @db.VarChar(255)
  startWork                               String?          @default("00:00") @db.VarChar(255)
  color                                   String?          @db.VarChar(255)
  farewellMessage                         String?
  whatsappId                              Int?
  allTicket                               String           @default("disable") @db.VarChar(255)
  allHistoric                             String           @default("disabled") @db.VarChar(255)
  allUserChat                             String           @default("disabled") @db.VarChar(255)
  resetPassword                           String?          @db.VarChar(255)
  confirmationToken                       String?          @db.VarChar(255)
  profileState                            String?          @db.VarChar(255)
  intervalo                               Boolean          @default(false)
  profilePic                              String?          @default("") @db.VarChar(255)
  accessPages                             String[]         @default([]) @db.VarChar(255)
  allowGroups                             Boolean          @default(false)
  resetToken                              String?          @db.VarChar(255)
  resetExpires                            DateTime?        @db.Timestamptz(6)
  twoFactorEnabled                        Boolean          @default(false)
  ChatMessages                            ChatMessages[]
  ChatUsers                               ChatUsers[]
  Chats                                   Chats[]
  QuickMessages                           QuickMessages[]
  RequestLogs                             RequestLogs[]
  Schedules                               Schedules[]
  Subscription                            Subscription[]
  Tasks                                   Tasks[]
  TicketNotes                             TicketNotes[]
  TicketTraking                           TicketTraking[]
  TicketUser                              TicketUser[]
  Tickets                                 Tickets[]
  UserRatings                             UserRatings[]
  UserSecurities                          UserSecurities[]
  Companies                               Companies?       @relation(fields: [companyId], references: [id])
  Whatsapps_Users_whatsappIdToWhatsapps   Whatsapps?       @relation("Users_whatsappIdToWhatsapps", fields: [whatsappId], references: [id])
  Whatsapps_Whatsapps_assignUserIdToUsers Whatsapps[]      @relation("Whatsapps_assignUserIdToUsers")

  @@index([companyId], map: "users_company_id")
  @@index([email], map: "users_email")
}

model Webhooks {
  id                                                   Int             @id @default(autoincrement())
  name                                                 String          @db.VarChar(255)
  url                                                  String          @db.VarChar(255)
  token                                                String          @db.VarChar(255)
  chaveApi                                             String          @db.VarChar(255)
  environment                                          String          @default("teste") @db.VarChar(255)
  companyId                                            Int
  createdAt                                            DateTime        @db.Timestamptz(6)
  updatedAt                                            DateTime        @db.Timestamptz(6)
  campoWebhookId                                       Int?
  fluxo                                                String?         @db.VarChar(255)
  conexao                                              String?         @db.VarChar(255)
  setor                                                String?         @db.VarChar(255)
  status                                               String?         @db.VarChar(255)
  tag                                                  String?         @db.VarChar(255)
  mensagem                                             String?
  autenticacao                                         Boolean         @default(false)
  clientNumber                                         String?         @db.VarChar(255)
  attendant                                            String?         @db.VarChar(255)
  CampoWebhooks_CampoWebhooks_webhookIdToWebhooks      CampoWebhooks[] @relation("CampoWebhooks_webhookIdToWebhooks")
  CampoWebhooks_Webhooks_campoWebhookIdToCampoWebhooks CampoWebhooks?  @relation("Webhooks_campoWebhookIdToCampoWebhooks", fields: [campoWebhookId], references: [id])
  Companies                                            Companies       @relation(fields: [companyId], references: [id], onDelete: Cascade)
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model WhatsAppApis {
  id                 Int                       @id @default(autoincrement())
  uuid               String                    @db.Uuid
  name               String                    @db.VarChar(255)
  baseUrl            String                    @db.VarChar(255)
  companyId          Int
  connectedInstances Int                       @default(0)
  createdAt          DateTime                  @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime                  @default(now()) @db.Timestamptz(6)
  totalInstances     Int                       @default(0)
  apiType            enum_WhatsAppApis_apiType @default(baileys)
  isActive           Boolean                   @default(true)
  Companies          Companies                 @relation(fields: [companyId], references: [id], onDelete: Cascade)
}

model WhatsappLidMaps {
  id        Int      @id @default(autoincrement())
  lid       String   @db.VarChar(255)
  companyId Int
  contactId Int
  createdAt DateTime @db.Timestamptz(6)
  updatedAt DateTime @db.Timestamptz(6)
  Contacts  Contacts @relation(fields: [contactId], references: [id], onDelete: Cascade)

  @@unique([lid, companyId], map: "unique_lid_companyId")
  @@index([companyId], map: "whatsapp_lid_maps_company_id")
  @@index([lid], map: "whatsapp_lid_maps_lid")
}

model WhatsappQueues {
  whatsappId Int
  queueId    Int
  createdAt  DateTime @db.Timestamptz(6)
  updatedAt  DateTime @db.Timestamptz(6)

  @@id([whatsappId, queueId])
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Whatsapps {
  id                                        Int                     @id @default(autoincrement())
  session                                   String?
  qrcode                                    String?
  status                                    String?                 @db.VarChar(255)
  battery                                   String?                 @db.VarChar(255)
  plugged                                   Boolean?
  createdAt                                 DateTime                @db.Timestamptz(6)
  updatedAt                                 DateTime                @db.Timestamptz(6)
  name                                      String                  @db.VarChar(255)
  isDefault                                 Boolean                 @default(false)
  retries                                   Int                     @default(0)
  greetingMessage                           String?
  companyId                                 Int?
  complationMessage                         String?
  outOfHoursMessage                         String?
  token                                     String?                 @unique
  farewellMessage                           String?
  provider                                  String?                 @default("stable")
  number                                    String?
  channel                                   String?
  facebookUserToken                         String?
  tokenMeta                                 String?
  facebookPageUserId                        String?
  facebookUserId                            String?
  sendIdQueue                               Int?
  promptId                                  Int?
  integrationId                             Int?
  chatGPTEnabled                            Boolean                 @default(false)
  typebotEnabled                            Boolean                 @default(false)
  n8nEnabled                                Boolean                 @default(false)
  typebotCredential                         String?                 @db.VarChar(255)
  n8nCredential                             String?                 @db.VarChar(255)
  maxUseBotQueues                           Int?                    @default(3)
  expiresTicket                             Int?                    @default(0)
  expiresInactiveMessage                    String?                 @default("") @db.VarChar(255)
  timeUseBotQueues                          Int?                    @default(0)
  typingEnabled                             Boolean                 @default(false)
  isActive                                  Boolean?                @default(false)
  greetingMediaAttachment                   String?
  transferQueueId                           Int?
  timeToTransfer                            Int?
  ratingMessage                             String?                 @db.VarChar(255)
  isImportModalOpen                         Boolean?                @default(false)
  selectedfila                              Int[]
  yesNoValue                                String?                 @db.VarChar(255)
  minutes                                   String?                 @db.VarChar(255)
  titlelist                                 String                  @default("")
  flowId                                    String?                 @db.Uuid
  proxyHost                                 String?
  proxyPort                                 Int?
  proxyUsername                             String?
  proxyPassword                             String?
  selectedInterval                          Int?
  selectedMoveQueueId                       Int?
  inatividade                               String?                 @db.VarChar(255)
  randomizeImmediately                      Boolean                 @default(false)
  selectedAttendants                        String[]
  selectedDepartments                       String[]
  importOldMessages                         DateTime?               @db.Timestamptz(6)
  importRecentMessages                      DateTime?               @db.Timestamptz(6)
  statusImportMessages                      String?                 @db.VarChar(255)
  closedTicketsPostImported                 Boolean?                @default(false)
  importOldMessagesGroups                   Boolean?                @default(false)
  commentReplyMessage                       String                  @default("")
  firstContactFlowId                        String?                 @db.Uuid
  baseUrl                                   String?
  inactivityMessage                         String?                 @default("")
  moveAttendingToWaiting                    Boolean?                @default(false)
  moveAttendingToWaitingTime                Int?                    @default(30)
  closeWaiting                              Boolean?                @default(false)
  closeWaitingTime                          Int?                    @default(60)
  openWaiting                               Boolean?                @default(false)
  assignUserId                              Int?
  openWaitingTime                           Int?                    @default(30)
  inatividadeLastMessageType                String?                 @default("any")
  selectedApiId                             Int?
  metaNumberId                              String?
  BaileysChats                              BaileysChats[]
  BaileysMessages                           BaileysMessages[]
  Campaigns                                 Campaigns[]
  ChatsImport                               ChatsImport[]
  Contacts                                  Contacts[]
  Keywords                                  Keywords[]
  MessageImportStatuses                     MessageImportStatuses[]
  TicketTraking                             TicketTraking[]
  Tickets                                   Tickets[]
  Users_Users_whatsappIdToWhatsapps         Users[]                 @relation("Users_whatsappIdToWhatsapps")
  Users_Whatsapps_assignUserIdToUsers       Users?                  @relation("Whatsapps_assignUserIdToUsers", fields: [assignUserId], references: [id])
  Companies                                 Companies?              @relation(fields: [companyId], references: [id])
  Flows_Whatsapps_firstContactFlowIdToFlows Flows?                  @relation("Whatsapps_firstContactFlowIdToFlows", fields: [firstContactFlowId], references: [id])
  Flows_Whatsapps_flowIdToFlows             Flows?                  @relation("Whatsapps_flowIdToFlows", fields: [flowId], references: [id])
  QueueIntegrations                         QueueIntegrations?      @relation(fields: [integrationId], references: [id])
  Prompts                                   Prompts?                @relation(fields: [promptId], references: [id], onDelete: Restrict, onUpdate: Restrict)

  @@index([name], map: "idx_whatsapp_name")
  @@index([companyId], map: "whatsapps_company_id")
  @@index([companyId, isActive], map: "whatsapps_company_id_is_active")
  @@index([companyId, status], map: "whatsapps_company_id_status")
  @@index([createdAt], map: "whatsapps_created_at")
  @@index([isActive], map: "whatsapps_is_active")
  @@index([name], map: "whatsapps_name")
  @@index([provider], map: "whatsapps_provider")
  @@index([status], map: "whatsapps_status")
  @@index([updatedAt], map: "whatsapps_updated_at")
}

model credentials {
  id                 Int       @id @default(autoincrement())
  typebotCredentials String?   @db.VarChar(255)
  n8nCredentials     String?   @db.VarChar(255)
  chatGptCredential  String?   @db.VarChar(255)
  companyId          Int
  createdAt          DateTime  @db.Timestamptz(6)
  updatedAt          DateTime  @db.Timestamptz(6)
  tokenHubsoft       String?
  tokenExpiration    DateTime? @db.Timestamptz(6)
}

model veryChats {
  id        Int      @id @default(autoincrement())
  isActive  Boolean  @default(true)
  createdAt DateTime @db.Timestamptz(6)
  updatedAt DateTime @db.Timestamptz(6)
}

enum enum_Ratings_type {
  message
  web
}

enum enum_WhatsAppApis_apiType {
  baileys
  whatsmeow
}
